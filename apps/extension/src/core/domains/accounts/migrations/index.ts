import { Migration, MigrationFunction } from "@core/libs/migrations/types"
import keyring from "@polkadot/ui-keyring"

export const LegacyAccountTypes = {
  TALISMAN: "TALISMAN", // mnemonic generated by Talisman
  LEGACY_ROOT: "ROOT", // legacy, deprecated
  DERIVED: "DERIVED",
  SEED: "SEED", // used for an imported mnemonic used to generate accounts but not stored
  SEED_STORED: "SEED_STORED", // used for an imported mnemonic which is stored
  JSON: "JSON",
  QR: "QR",
  HARDWARE: "HARDWARE",
  DCENT: "DCENT",
  WATCHED: "WATCHED",
} as const

export type LegacyAccountType = {
  [K in keyof typeof LegacyAccountTypes]: (typeof LegacyAccountTypes)[K]
}[keyof typeof LegacyAccountTypes]

export const NewAccountTypes = {
  TALISMAN: "TALISMAN", // all accounts where the private key is stored in the keyring
  QR: "QR",
  HARDWARE: "HARDWARE",
  DCENT: "DCENT",
  WATCHED: "WATCHED",
}

const accountTypeSwitch = (type: LegacyAccountType) => {
  switch (type) {
    case LegacyAccountTypes.TALISMAN:
    case LegacyAccountTypes.LEGACY_ROOT:
    case LegacyAccountTypes.DERIVED:
    case LegacyAccountTypes.SEED:
    case LegacyAccountTypes.SEED_STORED:
    case LegacyAccountTypes.JSON:
      return NewAccountTypes.TALISMAN
    default:
      return type
  }
}

export const migrateToNewAccountTypes: Migration = {
  forward: new MigrationFunction(async () => {
    keyring.getAccounts().forEach((account) => {
      const { origin } = account.meta as { origin: LegacyAccountType }
      const newOrigin = accountTypeSwitch(origin)
      const pair = keyring.getPair(account.address)
      keyring.saveAccountMeta(pair, { ...account.meta, origin: newOrigin })
    })
  }),
}
