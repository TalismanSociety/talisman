import { Trees } from "@core/domains/accounts/store.catalog"
import { Address } from "@core/types/base"
import type {
  AccountJson,
  RequestAccountCreateHardware,
  RequestAccountSubscribe,
  ResponseAccountExport,
} from "@polkadot/extension-base/background/types"
import { KeyringPair$Json } from "@polkadot/keyring/types"

export type { ResponseAccountExport, RequestAccountCreateHardware, AccountJson }

export type {
  RequestAccountList,
  RequestAccountBatchExport,
  RequestAccountChangePassword,
  RequestAccountCreateExternal,
  RequestAccountCreateSuri,
  RequestAccountEdit,
  RequestAccountShow,
  RequestAccountTie,
  RequestAccountValidate,
  ResponseJsonGetAccountInfo,
} from "@polkadot/extension-base/background/types"

// account types ----------------------------------

export interface AccountJsonHardwareSubstrate extends AccountJson {
  isHardware: true
  accountIndex: number
  addressOffset: number
  genesisHash: string
}

export interface AccountJsonHardwareEthereum extends AccountJson {
  isHardware: true
  path: string
}

export interface AccountJsonQr extends AccountJson {
  isQr: true
}

export interface AccountJsonWatched extends AccountJson {
  isPortfolio: boolean
}

export type AccountJsonAny = (
  | AccountJsonHardwareEthereum
  | AccountJsonHardwareSubstrate
  | AccountJsonQr
  | AccountJsonWatched
  | AccountJson
) & { origin?: AccountType | undefined } & {
  folderId?: string
  folderName?: string
  hidden?: boolean
  sortOrder?: number
}

export type IdenticonType = "talisman-orb" | "polkadot-identicon"

export enum AccountType {
  Talisman = "TALISMAN", // mnemonic generated by Talisman
  LegacyRoot = "ROOT", // legacy, deprecated
  Derived = "DERIVED",
  Seed = "SEED", // used for an imported mnemonic used to generate accounts but not stored
  SeedStored = "SEED_STORED", // used for an imported mnemonic which is stored
  Json = "JSON",
  Qr = "QR",
  Hardware = "HARDWARE",
  Watched = "WATCHED",
}

export const storedSeedAccountTypes: AccountType[] = [
  AccountType.Talisman,
  AccountType.LegacyRoot,
  AccountType.SeedStored,
]

export type StoreSeedAccountTypes =
  | (typeof AccountType)["Talisman"]
  | (typeof AccountType)["LegacyRoot"]
  | (typeof AccountType)["SeedStored"]

export interface AccountMeta extends AccountJson {
  name: string
  origin: AccountType
}

export interface Account {
  address: Address
  meta: AccountMeta
}

export type AccountsList = Account[]

export type AccountAddressType = "sr25519" | "ethereum"

export interface RequestAccountCreateFromSeed {
  name: string
  seed: string
  type?: AccountAddressType
}

export interface RequestAccountCreateFromJson {
  unlockedPairs: KeyringPair$Json[]
}

export interface RequestAccountCreateHardwareEthereum {
  name: string
  address: string
  path: string
}

export interface RequestAccountCreateQr {
  name: string
  address: string
  genesisHash: string | null
}

export interface RequestAccountCreateWatched {
  name: string
  address: string
  isPortfolio: boolean
}

export interface RequestAccountExternalSetIsPortfolio {
  address: string
  isPortfolio: boolean
}

export interface RequestAccountForget {
  address: string
}

export interface RequestAccountExport {
  address: string
  password: string
  exportPw: string
}

export interface RequestAccountExportPrivateKey {
  address: string
  password: string
}

export interface RequestAccountRename {
  address: string
  name: string
}
export interface RequestAccountCreate {
  name: string
  type: AccountAddressType
}

export type AccountsCatalogTree = "portfolio" | "watched"
export type RequestAccountsCatalogMutate =
  // account mutations
  | {
      type: "moveAccount"
      tree?: AccountsCatalogTree
      address: string
      folderId?: string
      beforeItem?: { type: "account"; address: string } | { type: "folder"; id: string }
    }
  | { type: "hideAccount"; tree?: AccountsCatalogTree; address: string }
  | { type: "showAccount"; tree?: AccountsCatalogTree; address: string }
  // folder mutations
  | { type: "addFolder"; tree?: AccountsCatalogTree; name: string; color?: string }
  | { type: "renameFolder"; tree?: AccountsCatalogTree; id: string; newName: string }
  | { type: "recolorFolder"; tree?: AccountsCatalogTree; id: string; newColor?: string }
  | {
      type: "moveFolder"
      tree?: AccountsCatalogTree
      id: string
      beforeItem?: { type: "account"; address: string } | { type: "folder"; id: string }
    }
  | { type: "removeFolder"; tree?: AccountsCatalogTree; id: string }

export interface AccountsMessages {
  // account message signatures
  "pri(accounts.create)": [RequestAccountCreate, string]
  "pri(accounts.create.seed)": [RequestAccountCreateFromSeed, string]
  "pri(accounts.create.json)": [RequestAccountCreateFromJson, string[]]
  "pri(accounts.create.hardware.substrate)": [
    Omit<RequestAccountCreateHardware, "hardwareType">,
    string
  ]
  "pri(accounts.create.hardware.ethereum)": [RequestAccountCreateHardwareEthereum, string]
  "pri(accounts.create.qr.substrate)": [RequestAccountCreateQr, string]
  "pri(accounts.create.watched)": [RequestAccountCreateWatched, string]
  "pri(accounts.forget)": [RequestAccountForget, boolean]
  "pri(accounts.export)": [RequestAccountExport, ResponseAccountExport]
  "pri(accounts.export.pk)": [RequestAccountExportPrivateKey, string]
  "pri(accounts.rename)": [RequestAccountRename, boolean]
  "pri(accounts.external.setIsPortfolio)": [RequestAccountExternalSetIsPortfolio, boolean]
  "pri(accounts.subscribe)": [RequestAccountSubscribe, boolean, AccountJson[]]
  "pri(accounts.catalog.subscribe)": [null, boolean, Trees]
  "pri(accounts.catalog.mutate)": [RequestAccountsCatalogMutate[], boolean]
  "pri(accounts.validateMnemonic)": [string, boolean]
  "pri(accounts.setVerifierCertMnemonic)": [string, boolean]
}

// Mnemonic types
export declare type MnemonicSubscriptionResult = {
  confirmed?: boolean
}

export declare type RequestAddressFromMnemonic = {
  mnemonic: string
  type?: AccountAddressType
}

export interface MnemonicMessages {
  // mnemonic message signatures
  "pri(mnemonic.unlock)": [string, string]
  "pri(mnemonic.confirm)": [boolean, boolean]
  "pri(mnemonic.subscribe)": [null, boolean, MnemonicSubscriptionResult]
  "pri(mnemonic.address)": [RequestAddressFromMnemonic, string]
}
